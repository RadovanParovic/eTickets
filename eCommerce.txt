 - controller, klasa kao i sve ali je cini kontrolerom to sto nasljedjuje kontroler base class
 - vazna stavka je da unutar kontrolera definisemo db context da bismo mogli da radimo sa podacima i bazom podataka
 
 
 --RAD SA PODACIMA
 - kreiramo interfejs i unutar njega definisemo koje cemo metode imati. Definisemo samo return type, ime metode i parametre. Npr: Actor GEtByID(int id);
 - unutar Data foldera napravili smo novi folder Services. Onda smo kreirali gore navedeni interfejs, pa klasu koja nasljedjuje interfejs.
 Unutar te klase definisemo dalje metode
  - da bi radilo, moramo da registrujemo service u Startup.cs Imamo tri vrste service, mi cemo dodati Scoped. Dodajemo ga u ConfigureServices method
  - kada ne radimo nista sa podacima unutar metode u controlleru mozemo izbaciti async i Task
  - ako se neki view nalazi unutar nekog foldera, onda znaci da pripada tom kontroleru, i kada pozivam metodu iz tog kontrolera dovoljno je samo asp-action da se navede
  
  -create post method - potrebno je definisati Create([Bind("FullName,ProfilePictureURL,Bio")]Actor actor). Bind nam govori sta treba da update-ujemo, koja svojstva,
  i samo njih ovdje ubacujemo
  -modelstat is valid - to znaci da li su polja modela validna, da li su sve stavke zadovoljene. Npr dodamo [Required(ErrorMessage = "Profile Picture is required")]. 
  Ovo znaci da moramo imati sliku, i koja poruka ce se ispisati u slucaju da nemamo slike. Moze i ovako nesto [StringLength(50, MinimumLength = 3, ErrorMessage = "Full Name must be between 3 and 50 chars")]
  
  -kad imamo npr edit, tu imam ID kao parametar, onda treba u view, u odgovarajuci element dodati asp-route-id (id se moze mijenjati)
  - ako stavim u metodu kao parametar Actor, ako sva svojstva update-ujem onda ne mora Bind, ako ne sva onda ide
   - ne mozes imati dvije metode sa istim imenom i istim parametrima. U tom slucaju mozes da kazes ovako [HttpPost, ActionName("Delete")]
   - kad hocu da stavim u centar jedan div unutar drugog, mogu da kazem da je taj div klase col-md-6 npr
   
   
    - ENTITY BASE REPOSITORY
	
- posto smo za Actors zavrsili sa osnovnim funkcionalnostima, takve je potrebno dodati i za ostale klase. Ali, da ne bismo opet pisali
isto za sve, sad cemo da napravimo univerzalne metode koje ce ae koristiti za sve klase
 - prvo smo kreirali entity base interfejs, i u njega stavljamo zajednicka svojstva za sve klase. U nasem slucaju je to samo ID
 - sledece je da smo napravili IEntityBaseRepository. Tu cemo staviti sve metode koje su zajednicke, parametar je T, to je genericki
i zajednicki parametar
- napravimo klasu EntityBaseRepository koja ce implementirati sve metode definisane u prethodnom interfejsu. Prouciti nasledjivanje.
- sledeca stvar koju treba uraditi je inject AppDbContext u prethodno kreiran repository, kako bismo mogli raditi sa bazom
- definisemo genericke metode. Npr ako imamo context.Actors, tu pisemo context.Set<T>(). U definiciji i nasledjivanju smo rekli da je T class
- kad definisemo metodu za update, koristimo EntityEntry
- kada smo sve definisali, sad je potrebno Actor zamijeniti ovom novom klasom. Naslijedimo EntityBase interfejs, i mozemo izbrisati
id iz actor class, ali i ne moramo, bice override 
- implementacija public interface IActorsService : IEntituBaseRepository<Actor> u actors
- kad god dodamo neki novi service, moramo u startup.cs da ga dodamo. I tu nam trebaju ta dva, idemo addscoped. I onda moramo da
ubacimo service u controller, slicno kao db context sto ubacujemo
- base, prouciti sta znaci
- kada se salje klasa u action u controlleru mora da ide BIND!
- kada smo definisali update, nigdje nismo koristili ID, i onda u controlleru pitamo da li je id iz request-a jednak id-ju producera	


- include properties kod Movies potrebno prouciti
- kad kreiramo dropdown, koristimo select. Prosledjujemo ID-jeve. Kad imamo npr listu int, on zna da je to multiple select,
ali mozemo da dodamo multiple atribut za svaki slucaj zbog svih browser-a 
<input asp-for="StartDate" type="date" class="form-control" />
<input asp-for="Price" type="number" class="form-control" />

new SelectList(movieDropdownsData.Cinemas, "Id", "Name");

asp-items="ViewBag.Cinemas" - ovo koristimo za select list, samo dodamo ovo
sp-items="Html.GetEnumSelectList<MovieCategory>()" - za kreiranje select list in view

- kreiram partial view za add new funkcionalnost. Definisem da model bude string, kako bih posle mogao da posaljem ime controllera.
Kad prikazujem partial view, onda kazem @await Html.PartialAsync("_CreatItem", "Producers") 


var existingActorsDb = _context.Actors_Movies.Where(n => n.MovieId == data.Id).ToList();
            _context.Actors_Movies.RemoveRange(existingActorsDb);
			
- kada imamo join tabelu, onda u nju dodajemo elemente koji su veza sa nekom tabelom
  
  https://dotnethow.net/images/actors/actor-2.jpeg